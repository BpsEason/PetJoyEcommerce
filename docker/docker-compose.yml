# docker/docker-compose.yml
# Docker Compose 設定檔，用於定義和執行多容器應用程式。

services:
  # Laravel 後端服務
  laravel:
    build:
      context: ./backend
    container_name: laravel
    restart: unless-stopped
    volumes:
      - ./backend:/var/www/html
    environment:
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
    depends_on:
      - mysql
      - redis
    networks:
      - petjoy_network

  # Nginx 服務，作為前端和後端的反向代理
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - laravel
      - nuxt
    networks:
      - petjoy_network

  # Nuxt 前端服務
  nuxt:
    build:
      context: ./frontend
    container_name: nuxt
    restart: unless-stopped
    volumes:
      - ./frontend:/app
    environment:
      - NUXT_PUBLIC_API_BASE_URL=http://nginx/api
    networks:
      - petjoy_network

  # MySQL 資料庫服務
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    volumes:
      - petjoy_mysql_data:/var/lib/mysql
    networks:
      - petjoy_network

  # Redis 快取服務
  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    networks:
      - petjoy_network

volumes:
  petjoy_mysql_data:

networks:
  petjoy_network:
    driver: bridge
